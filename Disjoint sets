#include <iostream>

using namespace std;

// modified root function.

int root (int Arr[ ] ,int i)
{
    if(Arr[i]!=i)
    {
    	Arr[i] = root(Arr[i],Arr);
    }
    return Arr[i];
}

void weighted_union(int Arr[ ],int size[ ],int A,int B)
{
    int root_A = root(Arr,A);
    int root_B = root(Arr,B);
    if(root_A==root_B)
     return;
    if(size[root_A] < size[root_B])
    {
        Arr[ root_A ] = Arr[root_B];
        size[root_B] += size[root_A];
    }
    else
    {
        Arr[ root_B ] = Arr[root_A];
        size[root_A] += size[root_B];
    }

}

int main() {
	int n,m;
	cin>>n>>m;
	int parent[n+1],size[n+1];
	for(int i=0;i<=n;i++)
	{
	    parent[i]= i;
	    size[i]= 1;
	}
	for(int i=0;i<m;i++)
	{
	    int a,b;
	    cin>>a>>b;
	    weighted_union(parent,size,a,b);
	}
	for(int i=0;i<=n;i++){
	 cout<<parent[i]<<" ";
	}
	cout<<endl;
	for(int i=0;i<=n;i++){
	 cout<<size[i]<<" ";
	}
	cout<<endl;
	 
	for(int i=1;i<=n;i++)
        printf("Node %d belongs to connected component %d\n",i,root(parent,i));
    long long ways=1;
    int nos=0;
    int ans=1;
    for(int i=1;i<=n;i++)
    {
        if(root(parent,i)==i)//this condition is true only for disjoint connected components
        {
            printf("%d leader %d size\n",i,size[i]);
            ans = ans*size[i];
            nos++;
        }

    }
    printf("Total connected components : %d\n",nos);
    cout<<ans;
	return 0;
}

